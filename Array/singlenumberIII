https://algorithms.tutorialhorizon.com/find-the-right-most-set-bit-of-a-number/

[VISUALIZATION]
honestly, i really spent a lot of time to understand this. here is the visualization that i hope latecomers get the idea

    first run ^ to get the a^b
    search the position to do partitioning in binary representation of a^b
    partition the array by this position and get a and b correspondingly

e.g. [1,2,1,3,2,5]

1 = 001
2 = 010
1 = 001
3 = 011
2 = 010
5 = 101

after 1st step, we found out that a^b = 3^5 = 6 which is 110
110 means that there are 2 digits on the left are different in binary representation of our result
let's use any one of the digit to partition our array

if we use the middle one, we can see that there are 2 sets of numbers that we can just use the simple single number to find out the single in each partition
1 = 001
1 = 001
5 = 101 ✅

2 = 010
2 = 010
3 = 011 ✅

if we use the leftmost one, we can still partition the array into the sets and do simple single number on it
1 = 001
2 = 010
1 = 001
3 = 011✅
2 = 010

5 = 101✅



vector<int> singleNumber(vector<int>& nums) {
    int aXorb = 0;  // the result of a xor b;
    for (auto item : nums) aXorb ^= item;
    int lastBit = (aXorb & ~(aXorb - 1));  // the last bit that a diffs b
    int intA = 0, intB = 0;
    for (auto item : nums) {
        // based on the last bit, group the items into groupA(include a) and groupB
        if (item & lastBit) intA = intA ^ item;
        else intB = intB ^ item;
    }
    return vector<int>{intA, intB};   
}
