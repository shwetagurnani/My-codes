#define ll long long
class Solution {
public:
    int countPrimes(int n) {
       int a[n+2]={0};
    
        ll c=0;
        for(ll i=2;i*i<=n;i++)
        {
            if(a[i]==0)
            {
            for(ll j=i*i;j<=n;j+=i)
            {
                a[j]=1;
            }
            }
        }
        for(ll i=2;i<n;i++)
        {
            if(a[i]==0)
            {
                cout<<i<<" ";
                c++;
            }
        }
        return c;
    }
};

complexity analysis=Your n/2 + n/3 + n/5 + … n/97 is not O(n), because the number of terms is not constant. [Edit after your edit: O(n2) is too loose an upper bound.] A loose upper-bound is n(1+1/2+1/3+1/4+1/5+1/6+…1/n) (sum of reciprocals of all numbers up to n), which is O(n log n): see Harmonic number. A more proper upper-bound is n(1/2 + 1/3 + 1/5 + 1/7 + …), that is sum of reciprocals of primes up to n, which is O(n log log n).

working of i loop=Let's write down all of 12's factors:

2 × 6 = 12
3 × 4 = 12
4 × 3 = 12
6 × 2 = 12

As you can see, calculations of 4 × 3 and 6 × 2 are not necessary. Therefore, we only need to consider factors up to √n because, if n is divisible by some number p, then n = p × q and since p ≤ q, we could derive that p ≤ √n.

working of j loop=In fact, we can mark off multiples of 5 starting at 5 × 5 = 25, because 5 × 2 = 10 was already marked off by multiple of 2, similarly 5 × 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is p, we can always mark off multiples of p starting at p2, then in increments of p: p2 + p, p2 + 2p, ... Now what should be the terminating loop condition?
