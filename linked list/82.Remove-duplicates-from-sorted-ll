/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* temp=NULL;
        ListNode* slow=head;
        ListNode* fast=head;
        ListNode* new_head=NULL;
        if(head==NULL)
            return NULL;
        while(1)
        {
           
            while(slow->val==fast->val)
            {
                fast=fast->next;
                if(fast==NULL)
                    break;    
            }
             if(fast==NULL)//end of list is arrived
            {
                 if(slow->next==NULL)
                 {
                if(temp!=NULL)
                 temp->next=slow;
                else
                   return slow;
                 }
                 else
                {
                    if(temp!=NULL)
                    temp->next=NULL;
                    else
                   return NULL;
                }
                return new_head;
             }
            if(slow->next==fast)//unique node
            {
                if(temp==NULL)
                {
                   temp=slow;
                    new_head=temp;
                }
                else
                   {
                    temp->next=slow;
                    temp=temp->next;
                    }
                 
            }
               slow=fast;
        }
         return new_head;
    }
};


****************solution 2*************************


public ListNode deleteDuplicates(ListNode head) {
    if (head == null) {
        return null;
    }
    
    ListNode dummy = new ListNode(0 == head.val ? 1 : 0);// to guarantee the dummy node is not same as the original head.
    dummy.next = head;
    
    ListNode pre = dummy;
    ListNode cur = head;

    ListNode first = dummy; // the first node in the new unduplicated(result) list.
    
    while (cur != null && cur.next != null) {
        if (cur.val != pre.val && cur.val != cur.next.val) { // we found a unique node, we connect it at the tail of the unduplicated list, and update the first node.
            first.next = cur;
            first = first.next;
        }
        pre = cur;
        cur = cur.next;
    }
    
    if (pre.val != cur.val) {  // the last node needs to be dealt with independently
        first.next = cur;
        first = first.next;
    }
    
    first.next = null;  // the subsequent list is duplicate.
    
    return dummy.next;
}
