class Solution {
public:
  ListNode *detectCycle(ListNode *head) {
      if(head==NULL)
         return 0;
        ListNode* ptr1=head;
        ListNode*ptr2=head->next;
        while(ptr2!=NULL&&ptr1!=ptr2)
        {
           ptr1=ptr1->next;
           ptr2=ptr2->next->next;
            cout<<ptr1->val<<" "<<ptr2->val<<endl;
            
        }
        // if(ptr1!=ptr2)
        //     return NULL;
      
         // ptr1=head;
      //ptr2=ptr2->next;
         // while(ptr1!=ptr2)
         // {
         //     cout<<ptr1->val;
         //     cout<<ptr2->val;
         //     ptr1=ptr1->next;
         //     ptr2=ptr2->next;
         // }
     
        return ptr1;
      // else
      //     return ptr2;
    }
};
